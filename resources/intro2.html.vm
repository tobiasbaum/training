<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8" />
	<title>Code Review Experiment</title>
	<meta http-equiv="X-UA-Compatible" content="chrome=1, IE=edge">
	<meta http-equiv="content-type" content="text/html; charset=UTF-8"/>

	<link type="text/css" rel="stylesheet" href="experiment.css" />
	
	<!-- Requires jQuery -->
	<script src="jquery.min.js" type="text/javascript"></script>
	<script type="text/javascript" src="experiment.js"></script>
	
	<script type="text/javascript">
        $(document).ready(function () {
        	activateLeaveWarning();
        });
    </script>
</head>
<body>
      <h3>A short introduction to the software system</h3>
      <p>All commits are from a text editor. It provides functionality to edit text (in so called
      "buffers"), access the file system, search and replace text, etc. All parts of the system that you will see are implemented in Java.
      
      <p>The search function of the editor can be adjusted with several flags: Case insensitive search, search for whole words only,
      search using regular expressions, ... The search dialog is implemented in the class <tt>SearchDialog</tt>. The class <tt>SearchAndReplace</tt>
      is a facade for the search algorithms and collaborates with subclasses of <tt>SearchMatcher</tt> to perform the search. A special feature of the
      editor is the so called "hyper search" that opens a separate dialog with all matches, possibly in different files. The matches are shown in a tree structure
      and the top node of the tree is a <tt>HyperSearchOperationNode</tt>.</p>
      
      <p>Access to the file system is encapsulated by a "virtual file system" (abbreviated "VFS"). A UI for browsing this file system is implemented in the class
      <tt>VFSBrowser</tt>; it uses a <tt>VFSDirectoryEntryTable</tt> and a <tt>VFSDirectoryEntryTableModel</tt> to show a table of directory entries.</p>
      
      <p>To keep the UI reactive, certain tasks are performed outside the UI's event processing thread. There is an old way of doing this, using subclasses of the abstract class
      <tt>WorkRequest</tt>, and a new way, using subclasses of the abstract class <tt>Task</tt>.
      
      <form action="codeview.html" method="post">
         <input type="hidden" name="index" value="0" />
         <button onClick="deactivateLeaveWarning()">Continue and start first review â–º</button>
      </form>
</body>
</html>