	@Override
	public SearchMatcher.Match nextMatch(CharSequence text,
		boolean start, boolean end, boolean firstTime,
		boolean reverse)
	{
		int pos = match(text,reverse);

		if (pos == -1)
		{
			return null;
		}
		else
		{
			returnValue.start = pos;
			returnValue.end = pos + pattern.length;
			return returnValue;
		}
	}
<<<57,org/experiment/editor/search/BoyerMooreSearchMatcher.java, nextMatch()
	@Override
	public SearchMatcher.Match nextMatch(CharSequence text,
		boolean start, boolean end, boolean firstTime,
		boolean reverse)
	{
		int pos = match(text,reverse);

		if (pos == -1)
		{
			return null;
		}
		else
		{
			returnValue.start = pos;
			returnValue.end = pos + pattern.length;
			int _end = returnValue.end;
			if (wholeWord && !isWholeWord(text, returnValue.start, _end))
			{
				CharSequence subText = text.subSequence(_end, text.length());
				Match match = nextMatch(subText,
					start, end, firstTime, reverse);
				if (match == null)
					return null;
				match.start = match.start + _end;
				return match;
			}
			return returnValue;
		}
	}
<<<71,org/experiment/editor/search/BoyerMooreSearchMatcher.java, nextMatch()
