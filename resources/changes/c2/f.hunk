	/**
	 * Finds the next instance of the search string in the specified
	 * buffer.
	 * @param view The view
	 * @param buffer The buffer
	 * @param start Location where to start the search
	 * @since version 4.1pre7
	 */
	public static boolean find(View view, Buffer buffer, int start,
		boolean firstTime, boolean reverse) throws Exception
	{
		
		EditBus.send(new PositionChanging(view.getEditPane()));
		
		SearchMatcher matcher = getSearchMatcher();
		if(matcher == null)
		{
			view.getToolkit().beep();
			return false;
		}

		CharSequence text;
		boolean startOfLine;
		boolean endOfLine;
		if(reverse)
		{
			text = new ReverseCharSequence(buffer.getSegment(0,start));
			startOfLine = true;
			endOfLine = (buffer.getLineEndOffset(
				buffer.getLineOfOffset(start)) - 1 == start);
		}
		else
		{
			text = buffer.getSegment(start,buffer.getLength() - start);
			startOfLine = (buffer.getLineStartOffset(
				buffer.getLineOfOffset(start)) == start);
			endOfLine = true;
		}
		SearchMatcher.Match match = matcher.nextMatch(text,
			startOfLine,endOfLine,firstTime,reverse);
		if(match != null)
		{
			Editor.commitTemporary(buffer);
			view.setBuffer(buffer,true);
			EditorTextArea textArea = view.getTextArea();

			if(reverse)
			{
				textArea.setSelection(new Selection.Range(
					start - match.end,
					start - match.start));
				// make sure end of match is visible
				textArea.scrollTo(start - match.start,false);
				textArea.moveCaretPosition(start - match.end);
			}
			else
			{
				textArea.setSelection(new Selection.Range(
					start + match.start,
					start + match.end));
				textArea.moveCaretPosition(start + match.end);
				// make sure start of match is visible
				textArea.scrollTo(start + match.start,false);
			}

			return true;
		}
		else
			return false;
	}
<<<638,org/experiment/editor/search/SearchAndReplace.java, find()
	/**
	 * Finds the next instance of the search string in the specified
	 * buffer.
	 * @param view The view
	 * @param buffer The buffer
	 * @param start Location where to start the search
	 * @since version 4.1pre7
	 */
	public static boolean find(View view, Buffer buffer, int start,
		boolean firstTime, boolean reverse) throws Exception
	{
		
		EditBus.send(new PositionChanging(view.getEditPane()));
		
		SearchMatcher matcher = getSearchMatcher();
		if(matcher == null)
		{
			view.getToolkit().beep();
			return false;
		}

		CharSequence text;
		boolean startOfLine;
		boolean endOfLine;
		if(reverse)
		{
			text = new ReverseCharSequence(buffer.getSegment(0,start));
			startOfLine = true;
			endOfLine = (buffer.getLineEndOffset(
				buffer.getLineOfOffset(start)) - 1 == start);
		}
		else
		{
			text = buffer.getSegment(start,buffer.getLength() - start);
			startOfLine = (buffer.getLineStartOffset(
				buffer.getLineOfOffset(start)) == start);
			endOfLine = true;
		}

		String noWordSep = 
			(String) buffer.getMode().getProperty("noWordSep");
		matcher.setNoWordSep(noWordSep);
		SearchMatcher.Match match = matcher.nextMatch(text,
			startOfLine,endOfLine,firstTime,reverse);
		if(match != null)
		{
			Editor.commitTemporary(buffer);
			view.setBuffer(buffer,true);
			EditorTextArea textArea = view.getTextArea();

			if(reverse)
			{
				textArea.setSelection(new Selection.Range(
					start - match.end,
					start - match.start));
				// make sure end of match is visible
				textArea.scrollTo(start - match.start,false);
				textArea.moveCaretPosition(start - match.end);
			}
			else
			{
				textArea.setSelection(new Selection.Range(
					start + match.start,
					start + match.end));
				textArea.moveCaretPosition(start + match.end);
				// make sure start of match is visible
				textArea.scrollTo(start + match.start,false);
			}

			return true;
		}
		else
			return false;
	}
<<<615,org/experiment/editor/search/SearchAndReplace.java, find()
