	/**
	 * Note that all files must be on the same VFS.
	 * @since version 4.3pre2
	 */
	public void delete(VFSFile[] files)
	{
		String dialogType;

		if(MiscUtilities.isURL(files[0].getDeletePath())
			&& FavoritesVFS.PROTOCOL.equals(
			MiscUtilities.getProtocolOfURL(files[0].getDeletePath())))
		{
			dialogType = "vfs.browser.delete-favorites";
		}
		else
		{
			dialogType = "vfs.browser.delete-confirm";
		}

		StringBuilder buf = new StringBuilder();
		String typeStr = "files";
		for(int i = 0; i < files.length; i++)
		{
			buf.append(files[i].getPath());
			buf.append('\n');
			if (files[i].getType() == VFSFile.DIRECTORY)
				typeStr = "directories and their contents";
		}

		Object[] args = { buf.toString(), typeStr};
		
		int result = GUIUtilities.confirm(this,dialogType,args,
			JOptionPane.YES_NO_OPTION,
			JOptionPane.WARNING_MESSAGE);
		if(result != JOptionPane.YES_OPTION)
			return;

		VFS vfs = VFSManager.getVFSForPath(files[0].getDeletePath());

		if(!startRequest())
			return;

		for(int i = 0; i < files.length; i++)
		{
			Object session = 
				vfs.createVFSSession(files[i].getDeletePath(),this);
			if(session == null)
			{
				continue;
			}

			VFSManager.runInWorkThread(new BrowserIORequest(
				BrowserIORequest.DELETE,this,
				session,vfs,files[i].getDeletePath(),
				null,null));
		}

		// Do not change this until all VFS Browser tasks are
		// done in ThreadUtilities
		VFSManager.runInAWTThread(new Runnable()
		{
			public void run()
			{
				endRequest();
			}
		});
	}
<<<658,org/experiment/editor/browser/VFSBrowser.java, delete()
	/**
	 * Note that all files must be on the same VFS.
	 * @since version 4.3pre2
	 */
	public void delete(VFSFile[] files)
	{
		String dialogType;

		if(MiscUtilities.isURL(files[0].getDeletePath())
			&& FavoritesVFS.PROTOCOL.equals(
			MiscUtilities.getProtocolOfURL(files[0].getDeletePath())))
		{
			dialogType = "vfs.browser.delete-favorites";
		}
		else
		{
			dialogType = "vfs.browser.delete-confirm";
		}

		StringBuilder buf = new StringBuilder();
		String typeStr = "files";
		for(int i = 0; i < files.length; i++)
		{
			buf.append(files[i].getPath());
			buf.append('\n');
			if (files[i].getType() == VFSFile.DIRECTORY)
				typeStr = "directories and their contents";
		}

		Object[] args = { buf.toString(), typeStr};
		
		int result = GUIUtilities.confirm(this,dialogType,args,
			JOptionPane.YES_NO_OPTION,
			JOptionPane.WARNING_MESSAGE);
		if(result != JOptionPane.YES_OPTION)
			return;

		VFS vfs = VFSManager.getVFSForPath(files[0].getDeletePath());

		if(!startRequest())
			return;

		final CountDownLatch latch = new CountDownLatch(files.length);
		for(int i = 0; i < files.length; i++)
		{
			Object session = 
				vfs.createVFSSession(files[i].getDeletePath(),this);
			if(session == null)
			{
				continue;
			}

			final Task task = new DeleteBrowserTask(
					this, session, vfs, files[i].getDeletePath());
			TaskManager.instance.addTaskListener(new TaskAdapter()
			{
				@Override
				public void done(Task t)
				{
					if (task == t)
					{
						latch.countDown();
						TaskManager.instance.removeTaskListener(this);
					}
				}
			});
			ThreadUtilities.runInBackground(task);
		}

		try
		{
			latch.await();
		}
		catch (InterruptedException e)
		{
			Log.log(Log.ERROR, this, e, e);
		}

		EventQueue.invokeLater(new Runnable()
		{
			@Override
			public void run()
			{
				endRequest();
			}
		});
	}
<<<658,org/experiment/editor/browser/VFSBrowser.java, delete()
